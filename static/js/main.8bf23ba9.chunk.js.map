{"version":3,"sources":["timeLog.js","BusSchedule.js","App.js","index.js"],"names":["LINEBREAK","repeat","Stop","name","departureTimes","this","ShuttleSchedule","console","log","currentTime","moment","schedule","stopData","buildStops","stopLocations","allStopsAndTimes","sortedStopsAndTimes","sortStopsAndTimes","sortedStops","sortedTimes","format","stop","location","slice","map","time","filter","isAfter","push","shuttleStop","sortedStopAndTimes","sort","a","b","i","length","originLoc","destinationLoc","originIndex","destinationIndex","routeOptions","qStop","stopAtLocation","undefined","queryData","route","oTime","dTime","q","printRouteData","originStop","originTime","destinationStop","destinationTime","timeLeft","to","journeyStops","journeyStopTimes","itinerary","concat","BusList","stops","state","stopsCol1","stopsCol2","origin","destination","results","originResults","iconHere","size","gridArea","object","document","getElementById","setState","resetButtonColor","style","backgroundColor","color","className","id","onClick","handleClick","data","query","returnData","elem","originArray","item","temp","split","originData","btn","fontSize","background","border","width","height","borderRadius","padding","transition","resetBtn","marginTop","marginLeft","indexOf","createStopsCol1","createStopsCol2","marginRight","resetStops","renderResults","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8bf23ba9.chunk.js","sourcesContent":["import moment from 'moment'\n\nconst LINEBREAK = '‚îÅ'.repeat(75)\n\n/**\n * Object for storing shuttle stops\n */\nclass Stop {\n    constructor(name, departureTimes) {\n        this.name = name\n        this.departureTimes = departureTimes\n    }\n}\n\n\n/**\n * Object for storing a bus/shuttle and its schedule\n */\nclass ShuttleSchedule {\n    \n    constructor() {\n\n        console.log(LINEBREAK)\n\n        this.currentTime = moment()\n\n        /* SET TIME HERE FOR TESTING PURPOSES */\n        ///this.currentTime.hour(4)\n        //this.currentTime.minute(10)\n\n        //Bus Schedule Array\n        this.schedule = [\n            ['Kline South',             'Kline',            '08:00', '08:45', '09:30', '10:30', '11:15', '13:00', '14:00', '15:00', '17:00', '18:00', '19:00', '20:00', '22:00', '23:00'],\n            ['Gahagan South',           'Gahagan',          '08:01', '08:46', '09:31', '10:31', '11:16', '13:01', '14:01', '15:01', '17:01', '18:01', '19:01', '20:01', '22:01', '23:01'],\n            ['Triangle South',          'Triangle',         '08:02', '08:47', '09:32', '10:32', '11:17', '13:02', '14:02', '15:02', '17:02', '18:02', '19:02', '20:02', '22:02', '23:02'],\n            ['Red Hook South',          'Red Hook',         '08:10', '08:55', '09:40', '10:40', '11:25', '13:10', '14:10', '15:10', '17:10', '18:10', '19:10', '20:10', '22:10', '23:10'],\n            ['MAT/UBS South',           'MAT/UBS',          '08:11', '08:56', '09:41', '10:41', '11:26', '13:11', '14:11', '15:11', '17:11', '18:11', '19:11', '20:11', '22:11'         ],\n            ['Hannaford',               'Hannaford',        '13:26', '14:26', '15:26', '17:26', '18:26', '19:26', '20:26', '22:26'                                                      ],\n            ['MAT/UBS North',           'MAT/UBS',          '08:13', '08:58', '09:43', '10:43', '11:28', '13:28', '14:28', '15:28', '17:28', '18:28', '19:28', '20:28', '22:28'         ],\n            ['Red Hook North',          'Red Hook',         '08:15', '09:00', '09:45', '10:45', '11:30', '13:30', '14:30', '15:30', '17:30', '18:30', '19:30', '20:30', '22:30'         ],\n            ['Triangle North',          'Triangle',         '08:21', '09:06', '09:51', '10:51', '11:36', '13:38', '14:38', '15:38', '17:38', '18:38', '19:38', '20:38', '22:38'         ],\n            ['Gahagan North',           'Gahagan',          '08:22', '09:07', '09:52', '10:52', '11:37', '13:39', '14:39', '15:39', '17:39', '18:39', '19:39', '20:39', '22:39'         ],\n            ['Kline North',             'Kline',            '08:25', '09:10', '09:55', '10:55', '11:40', '13:40', '14:40', '15:40', '17:40', '18:40', '19:40', '20:40', '22:40'         ],\n            ['Robbins North',           'Robbins',          '08:26', '09:11', '09:56', '10:56', '11:41', '13:42', '14:42', '15:42', '17:42', '18:42', '19:42', '20:42', '22:42'         ],\n            ['Campus Rd North',         'Campus Rd',        '08:27', '09:12', '09:57', '10:57', '11:42', '13:43', '14:43', '15:43', '17:43', '18:43', '19:43', '20:43', '22:43'         ],\n            ['Tivoli Monument North',   'Tivoli Monument',  '08:30', '09:15', '10:00', '11:00', '11:45', '13:48', '14:48', '15:48', '17:48', '18:48', '19:48', '20:48', '22:48'         ],\n            ['Tivoli',                  'Tivoli',           '07:50', '08:35', '09:20', '10:05', '11:05', '11:50', '13:50', '14:50', '15:50', '17:50', '18:50', '19:50', '20:50', '22:50'],\n            ['Tivoli Monument South',   'Tivoli Monument',  '07:52', '08:36', '09:21', '10:06', '11:06', '11:52', '13:52', '14:52', '15:52', '17:52', '18:52', '19:52', '20:52', '22:52'],\n            ['Campus Rd South',         'Campus Rd',        '07:56', '08:40', '09:25', '10:10', '11:10', '11:56', '13:56', '14:56', '15:56', '17:56', '18:56', '19:56', '20:56', '22:56'],\n            ['Robbins South',           'Robbins',          '07:57', '08:41', '09:26', '10:11', '11:11', '11:57', '13:57', '14:57', '15:57', '17:57', '18:57', '19:57', '20:57', '22:57'],\n            ['Ward Gate (South)',       'Ward Gate',        '07:58', '08:42', '09:27', '10:12', '11:12', '11:58', '13:58', '14:58', '15:58', '17:58', '18:58', '19:58', '20:58', '22:58']]\n\n\n        let stopData = this.buildStops()\n        this.stopLocations = stopData[0] // hashmap of location:  [Stop1] | [Stop1, Stop2]\n        this.allStopsAndTimes = stopData[1] // array of ALL stop name/time pairs:  [ [name1, time1], [name2, time2], [name_n, time_n] ]\n\n        let sortedStopsAndTimes = this.sortStopsAndTimes()\n        this.sortedStops = sortedStopsAndTimes[0] // ALL stops sorted\n        this.sortedTimes = sortedStopsAndTimes[1] // ALL departure times sorted\n\n        console.log(`Bus object loaded at ${this.currentTime.format(\"h:mm:ss a\")}`)\n\n    }\n\n    \n    /** \n     * Load stop data from schedule file, then add each line as a stop using addStop \n     * \n     * @returns \n     */\n     buildStops() {\n\n        let stopLocations = []\n        let allStopsAndTimes = []\n\n        // get array of lines in schedule file\n        for (let stop of this.schedule) {\n\n            let name = stop[0]\n            let location = stop[1]\n\n            let departureTimes = stop.slice(2)\n            departureTimes = departureTimes.map(time => moment(time, 'HH:mm')) // convert string format to time format\n\n            // remove times that already happened\n            departureTimes = departureTimes.filter(time => time.isAfter(this.currentTime))\n\n            // for each departure, add time and corresponding stop name to instance array\n            for (let time of departureTimes) allStopsAndTimes.push( [name, time] )\n\n            let shuttleStop = new Stop(name, departureTimes)\n\n            // add stop to hashmap of locations. if location already exists, add a new stop to existing location\n            if (location in stopLocations) stopLocations[location].push(shuttleStop) \n            else stopLocations[location] = [shuttleStop]\n\n        }\n\n        // console.log(stopLocations)\n        return [stopLocations, allStopsAndTimes]\n    }\n\n    /**\n     * Sort all departure times with their corresponding stop names.\n     * \n     * @returns {[String[], Moment[]]} [Sorted stop names array, sorted departure times array]\n     */\n    sortStopsAndTimes() {\n\n        // sort  [ [name1, time1], [name2, time2], [name_n, time_n] ]  IN ORDER OF time_n IN ascending order\n        let sortedStopAndTimes = this.allStopsAndTimes.sort(function(a, b) {\n            return ((a[1] < b[1]) ? -1 : ((a[1] === b[1]) ? 0 : 1))\n        })\n\n        // split sorted stop names and departure times into 2 different arrays\n        let sortedStops = []\n        let sortedTimes = []\n        \n        for (let i = 0; i < sortedStopAndTimes.length; i++) {\n            sortedStops.push(sortedStopAndTimes[i][0])\n            sortedTimes.push(sortedStopAndTimes[i][1])\n        }\n        \n        return [sortedStops, sortedTimes]\n\n    }\n\n\n    /**\n     * Shows user how to get from stop A to stop B\n     * \n     * @param {string} originLoc Where the user is leaving from (stop A)\n     * @param {string} destinationLoc Where the user would like to go (stop B)\n     */\n    query(originLoc, destinationLoc) {\n\n        console.log('origin:',       originLoc      )\n        console.log('destination:',  destinationLoc )\n        console.log(LINEBREAK)\n\n        let originIndex\n        let destinationIndex\n\n        let routeOptions = []\n\n        for (let i = 0; i < this.sortedStops.length; i++) {\n            // let qTime = this.sortedTimes[i] // e.g. Triangle North\n            let qStop = this.sortedStops[i]\n\n            if (this.stopAtLocation(qStop, originLoc)) {\n                // process.stdout.write('o')\n                originIndex = i\n            }\n\n            if (this.stopAtLocation(qStop, destinationLoc)) {\n                // process.stdout.write('d')\n                if (originIndex) {\n                    destinationIndex = i\n                    routeOptions.push( [originIndex, destinationIndex] )\n                    \n                    originIndex = undefined\n                    destinationIndex = undefined\n                }\n                \n            }\n\n        }\n\n        let queryData = []\n\n        // console.log(routeOptions)\n        for (let route of routeOptions) {\n            let oTime = route[0]\n            let dTime = route[1]\n            let q = this.printRouteData(oTime, dTime)\n            queryData.push(q)\n\n        }\n\n        // console.log(this.stopLocations)\n\n        return queryData\n\n    }\n\n    stopAtLocation(name, location) {\n\n        for (let stop of this.stopLocations[location]) {\n            if (name === stop.name) {\n                return true\n            }\n        }\n        return false\n    }\n\n    printRouteData(originIndex, destinationIndex) {\n        let originStop = this.sortedStops[originIndex]\n        let originTime = this.sortedTimes[originIndex]\n\n        let destinationStop = this.sortedStops[destinationIndex]\n        let destinationTime = this.sortedTimes[destinationIndex]\n\n        let timeLeft = this.currentTime.to(originTime, true)\n        let tripLength = originTime.to(destinationTime, true)\n\n        // array of all (stops & departure times) from origin -> destination\n        let journeyStops = this.sortedStops.slice(originIndex, destinationIndex+1)\n        let journeyStopTimes = this.sortedTimes.slice(originIndex, destinationIndex+1)\n\n        let itinerary = []\n        let destinationLoc\n\n        console.log(this.currentTime.format('MMMM Do, YYYY @ LTS (dddd)'))\n\n        console.log(`${originStop} -> ${destinationStop}`)\n        console.log(`The shuttle leaves ${originTime.format('h:mm a')}. You have ${timeLeft} to spare!`)\n        // console.log(`The trip takes ${tripLength}`)\n        // console.log(`Get off quickly, the shuttle leaves ${destinationStop} at ${destinationTime.format('h:mm a')}`)\n\n        for (let i = 0; i < journeyStops.length; i++) {\n            if (i+1 == journeyStops.length) {\n                // console.log(`You have arrived at ${journeyStops[i]}`)\n                destinationLoc = journeyStops[i]\n            } else {\n                // console.log(`${journeyStopTimes[i].format('h:mm a')} : ${journeyStops[i]}`)\n                itinerary.push( [journeyStops[i], ': ',journeyStopTimes[i].format('h:mm a'), ] )\n            }\n        }\n\n        console.log(`Itinerary:`)\n        console.log(itinerary)\n        console.log(destinationLoc)\n\n        /*\n        returned array:\n        [0]    Current time of request\n        [1]    Origin\n        [2]    Destination\n        [3]    Time Shuttle Leaves Origin\n        [4]    Amount of Time UNTIL that shuttle leaves\n        [5]    Itinerary in Array format [[time 1: loc 1], [time 2: loc 2]...[time n: loc n]]\n        [6]    Arrival location (without arrival time since it tends to be inaccurate)\n\n        */\n        \n\n        console.log(LINEBREAK)\n        return [\"Current time: \" + this.currentTime.format('h:mm a'), \"Leaving from: \" + originStop,\"Heading to: \" + destinationStop,\"Shuttle leaves at: \" + originTime.format('h:mm a'),\"Time until arrival: \" + timeLeft, \"Itinerary:\"].concat(itinerary).concat(\"Final destination: \" + destinationLoc)\n    }\n}\n\n\n\n\n\n\n\n// console.clear()\n\n// let shuttle = new ShuttleSchedule('schedule.csv')\n\n// let test = shuttle.query('Robbins', 'Kline')\n// console.log(test)\nexport {ShuttleSchedule};\n// what time does bus leave from origin\n// how much time until that departure\n// the stops on that route\n// how long trip takes\n// times of the stops on the route\n// next two options if they miss that shuttle","import React, {Component} from 'react'\nimport {ShuttleSchedule} from './timeLog.js'\nimport { RiLandscapeLine } from \"react-icons/ri\";\nimport { RiBarricadeFill } from \"react-icons/ri\";\nimport { RiCommunityLine } from \"react-icons/ri\";\nimport { RiHome3Line } from \"react-icons/ri\";\nimport { RiPencilRuler2Line } from \"react-icons/ri\";\nimport { RiShoppingCart2Fill } from \"react-icons/ri\";\nimport { RiBusFill } from \"react-icons/ri\";\nimport { RiBuilding4Line } from \"react-icons/ri\";\nimport { RiVipCrownLine } from \"react-icons/ri\";\nimport { RiHandHeartLine } from \"react-icons/ri\";\nimport { RiAncientGateLine } from \"react-icons/ri\";\n//Kline\n// import {GiForkKnifeSpoon } from 'react-icons/gi';\nclass BusList extends Component {\n\n    constructor(stops) {\n        super(stops);\n        this.state = {\n            stops: ['Gahagan', 'Triangle', 'Tivoli', 'Red Hook', 'MAT/UBS', 'Hannaford', 'Kline','Campus Rd', 'Tivoli Monument', 'Robbins', 'Ward Gate' ],\n            stopsCol1: ['Gahagan', 'Triangle', 'Tivoli', 'Red Hook', 'MAT/UBS', 'Hannaford'],\n            stopsCol2: ['Kline', 'Campus Rd', 'Tivoli Monument', 'Robbins', 'Ward Gate'],\n            origin: null,\n            destination: null,\n            results: null,\n            originResults: null,\n            iconHere: [<RiLandscapeLine size={200} gridArea='Gahagan'/> , <RiBarricadeFill size={200} gridArea='Triangle'/>, <RiCommunityLine size={200} gridArea='Tivoli'/>, <RiHome3Line size={200} gridArea='Red Hook'/>, <RiPencilRuler2Line size={200} gridArea='MAT/UBS'/>, <RiShoppingCart2Fill size={200} gridArea='Hannford'/>, <RiBusFill size={200} gridArea='Kline'/>, <RiBuilding4Line size={200} gridArea='Campus'/>, <RiVipCrownLine size={200} gridArea='Monument'/>, <RiHandHeartLine size={200} gridArea='Robbins'/>, <RiAncientGateLine size={200} gridArea='Ward Gate'/> ]\n\n        }\n    }\n\n    handleClick(stop) {\n        let object = document.getElementById(stop);\n        if (this.state.origin === null) {\n            this.setState({origin: stop});\n            this.resetButtonColor('rgb(109, 222, 139)');\n            object.style.backgroundColor = 'rgb(109, 222, 139)';\n        } else {\n            if (stop === this.state.origin && this.state.destination === null) {\n                this.setState({origin: null},{iconHere:null});             \n                this.resetButtonColor('rgb(109, 222, 139)');\n                return;\n            }\n            if (stop === this.state.origin) return;\n            this.resetButtonColor('rgb(189, 81, 81)');\n            object.style.backgroundColor = 'rgb(189, 81, 81)';\n            this.setState({destination: stop});\n        }\n    }\n\n    resetStops() {\n        this.setState({origin: null});\n        this.setState({destination: null});\n        this.setState({results: null});\n        this.setState({originResults: null})\n        console.log(this.state.results);\n        for (let stop in this.state.stops){\n            const object = document.getElementById(this.state.stops[stop])\n            object.style.backgroundColor = 'white';  \n        }\n    }\n\n    resetButtonColor(color) {\n        \n        for (let stop in this.state.stops) {\n            const object = document.getElementById(this.state.stops[stop]);\n            if (object.style.backgroundColor === color) {\n                object.style.backgroundColor = 'white';\n            }\n        }\n    }\n\n    createStopsCol1(style) {\n            const renderKeys = () => {\n                 return this.state.stopsCol1.map((stop) => {\n                     return <><li> <center> <button className = 'button' id = {stop} style={style} onClick = {() =>this.handleClick(stop)}>{stop}</button> </center></li> </>\n                   })                 \n               };\n        \n               return (\n                   <div>\n                       {renderKeys()}\n                   </div>\n               )\n        };\n    \n        createStopsCol2(style) {\n            const renderKeys = () => {\n                 return this.state.stopsCol2.map((stop) => {\n                     return <><li> <center> <button className = 'button' id = {stop} style={style} onClick = {() =>this.handleClick(stop)}>{stop}</button> </center></li> </>\n                   })                 \n               };\n        \n               return (\n                   <div>\n                       {renderKeys()}\n                   </div>\n               )\n        };\n    \n    renderResults(origin, destination) {\n        if (origin !== null && destination !== null) {\n            let shuttle = new ShuttleSchedule()\n            const data = shuttle.query(origin, destination)\n            console.log('******************************************')\n            console.log(data[0]);\n            console.log('******************************************')\n\n            const returnData = data[0].map((elem) => \n                <li>{elem}</li>\n            );\n\n            let originArray = [];\n            for (let item in data) {\n                let temp = data[item][3];\n                temp = temp.split('at:');\n                originArray.push(temp[1]);\n            }\n            console.log(originArray);\n            const originData = originArray.map((elem) => \n                <center><li>{elem}</li></center>\n            );\n            this.setState({results: returnData});\n            this.setState({originResults: originData});\n        } else {\n            this.setState({results: <center><li>Please enter an origin and destination</li></center>});\n        }\n    }\n\n    render() {\n        const btn = {\n            fontSize: \"100%\",\n            background: \"#FFFFFF\",\n            border: \"1px solid #000000\",\n            width:'100px',\n            height:'50px',\n            borderRadius: \"4px\",\n            padding: \"0.5rem 1rem\",\n            transition: \"500ms\"\n        }\n        const resetBtn = {\n            fontSize: \"100%\",\n            background: \"#FFFFFF\",\n            border: \"1px solid #000000\",\n            width:'100px',\n            height:'50px',\n            borderRadius: \"50%\",\n            padding: \"0.5rem 1rem\",\n            transition: \"500ms\",\n        }\n\n        const btnFlex={\n            display:'grid',\n            gridTemplateColumns: '1fr 1fr',\n            marginTop:'100px',\n            fontSize: \"100%\",\n            background: \"#FFFFFF\",\n            border: \"1px solid #000000\",\n            boxSizing: \"border-box\",\n            borderRadius: \"4px\",\n            padding: \"0.5rem 1rem\",\n            transition: \"500ms\"\n        }\n        \n        const font = {\n            backgroundColor: '#B80000',\n        }\n        \n        const originStyle = {\n            marginTop: '25%',\n            marginLeft: '25%'\n        }\n\n        const destinationStyle = {\n            marginTop: '25%',\n            marginRight: '25%'\n        }\n        return ( \n            <>\n            <div style = {font}>\n            <div className = 'Banner'>\n                <center><h1>Bard Shuttle App</h1></center>\n                <center><br /> <br /><h2>Select Origin and Destination</h2></center>\n            </div> \n            <br /> <br />\n            <div className = 'buttonsDisplay' >\n                <center><div style = {originStyle}>{this.state.iconHere[this.state.stops.indexOf(this.state.origin)]}</div></center>\n                <ul>\n                 {this.createStopsCol1(btn)}\n                </ul>\n                <ul>\n                    {this.createStopsCol2(btn)}\n                </ul>\n                <center><div style={destinationStyle}>{this.state.iconHere[this.state.stops.indexOf(this.state.destination)]}</div></center>\n            </div>\n            <br></br>\n            <div className = 'submit_reset'>\n            <div className='reset'><center><button style={resetBtn} onClick = {()=> this.resetStops()}>Reset</button></center></div>\n                \n                <div className='submit'><center><button style={resetBtn} onClick = {() => this.renderResults(this.state.origin, this.state.destination)}>Submit</button></center></div>\n            </div>\n                <div className = 'footerInfo'> \n                    <div>\n                        <h2><center>Next Available Trip:</center></h2>         \n                        <ul className = 'tripResults'>\n                            {this.state.results}\n                        </ul>\n                    </div>\n                    <div>\n                        <h2><center>{this.state.origin} Schedule:</center></h2>\n                        <ul className = 'schedule'>\n                            {this.state.originResults}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            </>\n        )\n    }\n}\n\nexport default BusList;","import React from 'react';\nimport BusList from './BusSchedule.js';\n\nfunction App() {\n  \n  return (\n    <>\n    <BusList />\n    </>\n  )\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport  './style.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}